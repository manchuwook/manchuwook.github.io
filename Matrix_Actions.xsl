<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSpy v2013 (x64) (http://www.altova.com) by Steven M Altsman (private) -->
<!--Designed and generated by Altova StyleVision Professional Edition 2013 (x64) - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" exclude-result-prefixes="#all">
	<xsl:output version="5.0" method="html" indent="no" encoding="UTF-8" use-character-maps="spaces"/>
	<xsl:character-map name="spaces">
		<xsl:output-character character="&#160;" string="&amp;nbsp;"/>
	</xsl:character-map>
	<xsl:param name="altova:bGeneratingFromPxf" select="false()"/>
	<xsl:param name="SV_OutputFormat" select="'HTML'"/>
	<xsl:param name="SV_BaseOutputFileName" as="xs:string?">
		<xsl:sequence select="for $i in altovaext:get-base-output-uri(), $j in tokenize( $i, &apos;[/\\]&apos; )[last()] return replace( $j, &apos;\.[^\.\s#%;]*$&apos;, &apos;&apos; )" use-when="function-available(&apos;altovaext:get-base-output-uri&apos;)"/>
	</xsl:param>
	<xsl:param name="SV_GeneratedFileNamePrefix" select="if ( $SV_BaseOutputFileName ) then $SV_BaseOutputFileName else &apos;Matrix_Actions&apos;" as="xs:string?"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:variable name="altova:nPxPerIn" select="96"/>
	<xsl:variable name="altova:CssImages" select="()"/>
	<xsl:template match="/">
		<xsl:call-template name="altova:Root"/>
	</xsl:template>
	<xsl:template name="altova:Root">
		<html>
			<head>
				<title/>
				<meta name="generator" content="Altova StyleVision Professional Edition 2013 (x64) (http://www.altova.com)"/>
				<meta http-equiv="X-UA-Compatible" content="IE=9"/>
				<style type="text/css">
					<xsl:comment>@import  url("tabs.css");
@import  url("unsemantic-master/assets/stylesheets/unsemantic-grid-responsive-no-ie7.css");
@import  url("modal.css");</xsl:comment>
				</style>
				<xsl:comment>[if IE]&gt;&lt;STYLE type=&quot;text/css&quot;&gt;.altova-rotate-left-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3)} .altova-rotate-right-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1)} &lt;/STYLE&gt;&lt;![endif]</xsl:comment>
				<xsl:comment>[if !IE]&gt;&lt;!</xsl:comment>
				<style type="text/css">.altova-rotate-left-textbox{-webkit-transform: rotate(-90deg) translate(-100%, 0%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(-90deg) translate(-100%, 0%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(-90deg) translate(-100%, 0%); -ms-transform-origin: 0% 0%;}.altova-rotate-right-textbox{-webkit-transform: rotate(90deg) translate(0%, -100%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(90deg) translate(0%, -100%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(90deg) translate(0%, -100%); -ms-transform-origin: 0% 0%;}</style>
				<xsl:comment>&lt;![endif]</xsl:comment>
				<script type="text/javascript">
					<xsl:comment>
 var script = document.createElement(&apos;script&apos;);
 script.type = &apos;text/javascript&apos;;
 script.src = &apos;./dice-roller.js&apos;;
 var head = document.getElementsByTagName(&apos;head&apos;)[0];
 head.appendChild(script);

function openRoller(dice) {
	// Get a reference to the dice tower
	var diceTower = document.querySelector(&apos;#dice-tower&apos;);

	// Get a reference to the base dice
	var diceAmount = diceTower.querySelector(&apos;#dice&apos;);
	diceAmount.innerHTML = dice;

	// Set the tower back to visible
	diceTower.style.display = &apos;block&apos;;
}

function closeTower() {
	// Get a reference to the dice tower
	var diceTower = document.querySelector(&apos;#dice-tower&apos;);
	diceTower.style.display = &apos;none&apos;;

	// Fetch a reference to the rolling area and clear it
	var dr = document.querySelector(&quot;#dice-results&quot;);
	dr.innerHTML = &apos;&lt;div class=&quot;grid-40&quot;&gt;&lt;span&gt;Dice Rolled&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;grid-40&quot;&gt;&lt;span&gt;Dice Results&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;grid-20 reroll&quot;&gt;&lt;span&gt;Reroll&lt;/span&gt;&lt;/div&gt;&apos;;
}

function calcResults(rolled, baseDice) {
	// Re-total the results
	// - explodable (6s)
	var explodable = rolled.reduce((total,x)=&gt;{ return x == 6 ? total + 1 : total }, 0);

	// - hit (5 or 6)
	var hits = rolled.reduce((total,x)=&gt;{ return x &gt;= 5 ? total + 1 : total }, 0);

	// - miss (1-4)
	var misses = rolled.reduce((total,x)=&gt;{ return x &lt; 5 ? total + 1 : total }, 0);

	// - possible glitch (1)
	var glitched = rolled.reduce((total,x)=&gt;{ return x == 1 ? total + 1 : total }, 0);

	// - confirmed glitch (base dice / 2 in 1s)
	var glitchmsg = &quot;&quot;;
	if (glitched == Math.ceil(baseDice / 2)) { glitchmsg = &quot;, &lt;b&gt;GLITCHED!&lt;/b&gt;&quot;; }
	
	// - critical glitch (confirmed glitch + no hits)
	if (glitched == Math.ceil(baseDice / 2) &amp;&amp; hits == 0) { glitchmsg = &quot;, &lt;b&gt;CRITICAL GLITCH!&lt;/b&gt;&quot;; }

	// Add individual dice stats
	results = hits + &apos; hits, &apos;;
	results += misses + &apos; failures&apos;;
	results += glitchmsg;

	return results;
}

function rerollDice(me) {
	// Fetch the base dice value
	var baseDice = parseFloat(document.querySelector(&quot;#dice&quot;).innerHTML || 0);

	// Get out the dice
	var diceRoller = new DiceRoller();
	var diceType = &apos;d6&apos;;

	var p = me.parentElement.previousSibling.previousSibling;
	var rolled = p.innerHTML.split(&quot;,&quot;).map(Number);
	rolled.map((t,a)=&gt;{
		if (t &lt; 5) {
			// Roll the unsuccessful die
			var drr = diceRoller.roll(&apos;1&apos; + diceType);
			// Substitute the new thing
			rolled[a] = drr.rolls[0];
		}
		// console.log(t,a)
	}
	);
	// replace the results with the new roll
	p.innerHTML = rolled;
	// Set the interior text
	p.nextSibling.innerHTML = calcResults(rolled, baseDice);

	// Kill the option to reroll
	me.parentElement.remove();
}

function rollDice() {
	// Fancy RPG dice roller
	var diceRoller = new DiceRoller();

	// Shadowrun&apos;s dicetype is always d6
	var diceType = &apos;d6&apos;;

	// Fetch the base dice value
	var baseDice = parseFloat(document.querySelector(&quot;#dice&quot;).innerHTML || 0);

	// Fetch the bonus dice value
	var bonus = parseFloat(document.querySelector(&quot;#bonus-dice&quot;).value || 0);

	// Fetch the penalty dice value
	var penalty = parseFloat(document.querySelector(&quot;#penalty-dice&quot;).value || 0);

	// Fetch the bonus dice value
	var preEdge = document.querySelector(&quot;#isPre&quot;).checked || false;
	var edgeDice = parseFloat(document.querySelector(&quot;#edge-dice&quot;).value || 0);

	// If edge was burned, edge dice are added, 6&apos;s append another die, rolling more for each 6
	if (preEdge &amp;&amp; edgeDice &gt; 0) {
		// Add the edge value
		bonus += edgeDice;

		// The roller is now exploding
		diceType += &apos;!&apos;;
	}

	// Roll those dice
	diceRoller.roll((baseDice + bonus - penalty) + diceType);

	// Store it in a temp variable
	var latestRoll = diceRoller.getLog().shift();

	// Get the console window
	var dr = document.querySelector(&quot;#dice-results&quot;);

	// Only one item in the array
	var rolled = latestRoll.rolls[0];

	// Spit out the results
	var results = &apos;&lt;div class=&quot;grid-40&quot; id=&quot;dicetray&quot;&gt;&apos; + rolled + &apos;&lt;/div&gt;&apos;;
	// Add individual dice stats
	results += &apos;&lt;div class=&quot;grid-40&quot;&gt;&apos;;
	results += calcResults(rolled, baseDice);
	results += &apos;&lt;/div&gt;&apos;;
	// Show the reroll link - you cannot reroll if you spent edge
	if (!preEdge) {
		results += &apos;&lt;div class=&quot;grid-20 reroll&quot;&gt;(&lt;a href=&quot;#&quot; onclick=&quot;rerollDice(this)&quot;&gt;Reroll&lt;/a&gt;)&lt;/div&gt;&apos;;
	}
	dr.innerHTML += results;
}
//</xsl:comment>
				</script>
				<style type="text/css">@page { margin-left:0.60in; margin-right:0.60in; margin-top:0.79in; margin-bottom:0.79in } @media print { br.altova-page-break { page-break-before: always; } }</style>
			</head>
			<body>
				<xsl:element name="div">
					<xsl:attribute name="class"><xsl:value-of select="'grid-container'"/></xsl:attribute>
					<xsl:element name="div">
						<xsl:attribute name="class"><xsl:value-of select="'tabs grid-100'"/></xsl:attribute>
						<xsl:for-each select="$XML">
							<xsl:for-each select="document">
								<xsl:for-each select="public">
									<br/>
									<xsl:for-each select="character">
										<xsl:element name="input">
											<xsl:attribute name="class"><xsl:value-of select="'input'"/></xsl:attribute>
											<xsl:attribute name="id"><xsl:value-of select="fn:concat('tab-',fn:string-join(for $i in (position())[not(. instance of text() and fn:string-length() eq 0)] return string($i), ' '))"/></xsl:attribute>
											<xsl:attribute name="name"><xsl:value-of select="'tabs'"/></xsl:attribute>
											<xsl:attribute name="type"><xsl:value-of select="'radio'"/></xsl:attribute>
										</xsl:element>
										<xsl:element name="label">
											<xsl:attribute name="class"><xsl:value-of select="'label'"/></xsl:attribute>
											<xsl:attribute name="for"><xsl:value-of select="fn:concat('tab-',fn:string-join(for $i in (position())[not(. instance of text() and fn:string-length() eq 0)] return string($i), ' '))"/></xsl:attribute>
											<xsl:for-each select="@name">
												<span>
													<xsl:value-of select="string(.)"/>
												</span>
											</xsl:for-each>
										</xsl:element>
										<xsl:element name="div">
											<xsl:attribute name="class"><xsl:value-of select="'panel grid-100 actions'"/></xsl:attribute>
											<xsl:variable name="altova:table">
												<table border="0" cellpadding="0" cellspacing="0" width="100%">
													<xsl:variable name="altova:CurrContextGrid_0" select="."/>
													<xsl:variable name="altova:ColumnData"/>
													<tbody>
														<tr bgcolor="#3c3c3c">
															<td valign="top">
																<span style="color:#f0f0f0; font-weight:bold; ">
																	<xsl:text>Simple Actions</xsl:text>
																</span>
															</td>
															<td>
																<span style="color:#f0f0f0; font-weight:bold; ">
																	<xsl:text>Marks</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span style="color:#f0f0f0; font-weight:bold; ">
																	<xsl:text>Note</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span style="color:#f0f0f0; font-weight:bold; ">
																	<xsl:text>Test: Source</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span style="color:#f0f0f0; ">
																	<xsl:text>d6</xsl:text>
																</span>
															</td>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Change Icon</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>Owner</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Change target icon, or self</xsl:text>
																</span>
															</td>
															<td valign="top"/>
															<td valign="top"/>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span style="font-style:italic; ">
																	<xsl:text>Data Processing</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>Miscellaneous</xsl:text>
																</span>
															</td>
															<td valign="top"/>
															<td valign="top"/>
														</tr>
														<tr>
															<td valign="top">
																<span>
																	<xsl:text>Check Overwatch Score</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>-</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Get OS from GM</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Electronic Warfare [</xsl:text>
																</span>
																<xsl:for-each select="skills">
																	<xsl:for-each select="*">
																		<xsl:for-each select="skill[@name=&apos;Electronic Warfare&apos;]">
																			<xsl:for-each select="@modified">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>] + Logic [</xsl:text>
																</span>
																<xsl:for-each select="attributes">
																	<xsl:for-each select="attribute[@name=&apos;Logic&apos;]">
																		<xsl:for-each select="@modified">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>]</xsl:text>
																</span>
															</td>
															<td valign="top">
																<a onclick="openRoller({sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Electronic Warfare&apos;]/@modified)})">
																	<xsl:choose>
																		<xsl:when test="not(string(&apos;&apos;))">
																			<xsl:attribute name="href"><xsl:text>#</xsl:text></xsl:attribute>
																		</xsl:when>
																		<xsl:when test="substring(string(&apos;&apos;), 1, 1) = '#'">
																			<xsl:attribute name="href"><xsl:value-of select="&apos;&apos;"/></xsl:attribute>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:attribute name="href"><xsl:if test="substring(string(&apos;&apos;), 2, 1) = ':'"><xsl:text>file:///</xsl:text></xsl:if><xsl:value-of select="translate(string(&apos;&apos;), '&#x5c;', '/')"/></xsl:attribute>
																		</xsl:otherwise>
																	</xsl:choose>
																	<span>
																		<xsl:text>[</xsl:text>
																	</span>
																	<xsl:for-each select="sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Electronic Warfare&apos;]/@modified)">
																		<xsl:choose>
																			<xsl:when test=". instance of element() or . instance of document-node()">
																				<xsl:apply-templates/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:value-of select="."/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																	<span>
																		<xsl:text>d6]</xsl:text>
																	</span>
																</a>
															</td>
														</tr>
														<tr>
															<td valign="top">
																<span style="font-style:italic; ">
																	<xsl:text>Sleaze</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>Information Gathering</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>6d6</xsl:text>
																</span>
															</td>
															<td valign="top"/>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Invite Mark</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>Owner</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Choose # of Marks and Duration</xsl:text>
																</span>
															</td>
															<td valign="top"/>
															<td valign="top"/>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Data Processing</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>Mark Manipulation</xsl:text>
																</span>
															</td>
															<td valign="top"/>
															<td valign="top"/>
														</tr>
														<tr>
															<td valign="top">
																<span>
																	<xsl:text>Jack Out</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>Owner</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Reboot and Dumpshock.&#160; Roll only for Linklock</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Hardware [</xsl:text>
																</span>
																<xsl:for-each select="skills">
																	<xsl:for-each select="*">
																		<xsl:for-each select="skill[@name=&apos;Hardware&apos;]">
																			<xsl:for-each select="@modified">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>]&#160; + Willpower [</xsl:text>
																</span>
																<xsl:for-each select="attributes">
																	<xsl:for-each select="attribute[@name=&apos;Willpower&apos;]">
																		<xsl:for-each select="@modified">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>]</xsl:text>
																</span>
															</td>
															<td valign="top">
																<a onclick="openRoller({sum(attributes/attribute[@name=&apos;Willpower&apos;]/@modified | skills/active/skill[@name=&apos;Hardware&apos;]/@modified)})">
																	<xsl:choose>
																		<xsl:when test="not(string(&apos;&apos;))">
																			<xsl:attribute name="href"><xsl:text>#</xsl:text></xsl:attribute>
																		</xsl:when>
																		<xsl:when test="substring(string(&apos;&apos;), 1, 1) = '#'">
																			<xsl:attribute name="href"><xsl:value-of select="&apos;&apos;"/></xsl:attribute>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:attribute name="href"><xsl:if test="substring(string(&apos;&apos;), 2, 1) = ':'"><xsl:text>file:///</xsl:text></xsl:if><xsl:value-of select="translate(string(&apos;&apos;), '&#x5c;', '/')"/></xsl:attribute>
																		</xsl:otherwise>
																	</xsl:choose>
																	<span>
																		<xsl:text>[</xsl:text>
																	</span>
																	<xsl:for-each select="sum(attributes/attribute[@name=&apos;Willpower&apos;]/@modified | skills/active/skill[@name=&apos;Hardware&apos;]/@modified)">
																		<xsl:choose>
																			<xsl:when test=". instance of element() or . instance of document-node()">
																				<xsl:apply-templates/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:value-of select="."/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																	<span>
																		<xsl:text>d6]</xsl:text>
																	</span>
																</a>
															</td>
														</tr>
														<tr>
															<td valign="top">
																<span>
																	<xsl:text>Firewall</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>Miscellaneous</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Logic + Attack</xsl:text>
																</span>
															</td>
															<td valign="top">
																<xsl:for-each select="gear">
																	<xsl:for-each select="equipment">
																		<xsl:for-each select="item[(matrix/matrixattribute[@name=&apos;Sleaze&apos;]/@modified &gt; 0 or  contains(description, &apos;ommlink&apos;))]">
																			<xsl:element name="div">
																				<xsl:attribute name="class"><xsl:value-of select="'grid-100'"/></xsl:attribute>
																				<xsl:for-each select="@name">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																				<span>
																					<xsl:text> [</xsl:text>
																				</span>
																				<xsl:for-each select="sum(./matrix/matrixattribute[@name=&apos;Attack&apos;]/@modified   | ../../../attributes/attribute[@name=&apos;Logic&apos;]/@modified)">
																					<xsl:choose>
																						<xsl:when test=". instance of element() or . instance of document-node()">
																							<xsl:apply-templates/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:value-of select="."/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																				<span>
																					<xsl:text>d6]</xsl:text>
																				</span>
																			</xsl:element>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</td>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Send Message</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>-</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Send short sentence, image, or file to user.</xsl:text>
																</span>
															</td>
															<td valign="top"/>
															<td valign="top"/>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Data Processing</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>Miscellaneous</xsl:text>
																</span>
															</td>
															<td valign="top"/>
															<td valign="top"/>
														</tr>
														<tr>
															<td valign="top">
																<span>
																	<xsl:text>Switch Interface Mode</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>Owner</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>AR to VR and vice versa. Can&apos;t if Linklocked</xsl:text>
																</span>
															</td>
															<td valign="top"/>
															<td valign="top"/>
														</tr>
														<tr>
															<td valign="top">
																<span>
																	<xsl:text>Data Processing</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>Miscellaneous</xsl:text>
																</span>
															</td>
															<td valign="top"/>
															<td valign="top"/>
														</tr>
														<tr bgcolor="#5a5a5a">
															<td valign="top">
																<span style="color:#f0f0f0; font-weight:bold; ">
																	<xsl:text>Complex Actions</xsl:text>
																</span>
															</td>
															<td>
																<span style="color:#f0f0f0; font-weight:bold; ">
																	<xsl:text>Marks</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span style="color:#f0f0f0; font-weight:bold; ">
																	<xsl:text>Note</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span style="color:#f0f0f0; font-weight:bold; ">
																	<xsl:text>Test: Source</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span style="color:#f0f0f0; ">
																	<xsl:text>d6</xsl:text>
																</span>
															</td>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Format Device</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>3</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Device is Formatted on next Reboot</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Computer [</xsl:text>
																</span>
																<xsl:for-each select="skills">
																	<xsl:for-each select="*">
																		<xsl:for-each select="skill[@name=&apos;Computer&apos;]">
																			<xsl:for-each select="@modified">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>]&#160; + Logic [</xsl:text>
																</span>
																<xsl:for-each select="attributes">
																	<xsl:for-each select="attribute[@name=&apos;Logic&apos;]">
																		<xsl:for-each select="@modified">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>]</xsl:text>
																</span>
															</td>
															<td valign="top">
																<a onclick="openRoller({sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Computer&apos;]/@modified)})">
																	<xsl:choose>
																		<xsl:when test="not(string(&apos;&apos;))">
																			<xsl:attribute name="href"><xsl:text>#</xsl:text></xsl:attribute>
																		</xsl:when>
																		<xsl:when test="substring(string(&apos;&apos;), 1, 1) = '#'">
																			<xsl:attribute name="href"><xsl:value-of select="&apos;&apos;"/></xsl:attribute>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:attribute name="href"><xsl:if test="substring(string(&apos;&apos;), 2, 1) = ':'"><xsl:text>file:///</xsl:text></xsl:if><xsl:value-of select="translate(string(&apos;&apos;), '&#x5c;', '/')"/></xsl:attribute>
																		</xsl:otherwise>
																	</xsl:choose>
																	<span>
																		<xsl:text>[</xsl:text>
																	</span>
																	<xsl:for-each select="sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Computer&apos;]/@modified)">
																		<xsl:choose>
																			<xsl:when test=". instance of element() or . instance of document-node()">
																				<xsl:apply-templates/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:value-of select="."/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																	<span>
																		<xsl:text>d6]</xsl:text>
																	</span>
																</a>
															</td>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Sleaze</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>Device Manipulation</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Willpower + Firewall</xsl:text>
																</span>
															</td>
															<td valign="top">
																<xsl:for-each select="gear">
																	<xsl:for-each select="equipment">
																		<xsl:for-each select="item[(matrix/matrixattribute[@name=&apos;Sleaze&apos;]/@modified &gt; 0 or  contains(description, &apos;ommlink&apos;))]">
																			<xsl:element name="div">
																				<xsl:attribute name="class"><xsl:value-of select="'grid-100'"/></xsl:attribute>
																				<xsl:for-each select="@name">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																				<span>
																					<xsl:text> [</xsl:text>
																				</span>
																				<xsl:for-each select="sum(./matrix/matrixattribute[@name=&apos;Firewall&apos;]/@modified   | ../../../attributes/attribute[@name=&apos;Willpower&apos;]/@modified)">
																					<xsl:choose>
																						<xsl:when test=". instance of element() or . instance of document-node()">
																							<xsl:apply-templates/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:value-of select="."/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																				<span>
																					<xsl:text>d6]</xsl:text>
																				</span>
																			</xsl:element>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</td>
														</tr>
														<tr>
															<td valign="top">
																<span>
																	<xsl:text>Reboot Device</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>3</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Dumpshock.&#160; Can&apos;t reboot if Linklocked</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Computer [</xsl:text>
																</span>
																<xsl:for-each select="skills">
																	<xsl:for-each select="*">
																		<xsl:for-each select="skill[@name=&apos;Computer&apos;]">
																			<xsl:for-each select="@modified">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>] + Logic [</xsl:text>
																</span>
																<xsl:for-each select="attributes">
																	<xsl:for-each select="attribute[@name=&apos;Logic&apos;]">
																		<xsl:for-each select="@modified">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>]</xsl:text>
																</span>
															</td>
															<td valign="top">
																<a onclick="openRoller({sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Computer&apos;]/@modified)})">
																	<xsl:choose>
																		<xsl:when test="not(string(&apos;&apos;))">
																			<xsl:attribute name="href"><xsl:text>#</xsl:text></xsl:attribute>
																		</xsl:when>
																		<xsl:when test="substring(string(&apos;&apos;), 1, 1) = '#'">
																			<xsl:attribute name="href"><xsl:value-of select="&apos;&apos;"/></xsl:attribute>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:attribute name="href"><xsl:if test="substring(string(&apos;&apos;), 2, 1) = ':'"><xsl:text>file:///</xsl:text></xsl:if><xsl:value-of select="translate(string(&apos;&apos;), '&#x5c;', '/')"/></xsl:attribute>
																		</xsl:otherwise>
																	</xsl:choose>
																	<span>
																		<xsl:text>[</xsl:text>
																	</span>
																	<xsl:for-each select="sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Computer&apos;]/@modified)">
																		<xsl:choose>
																			<xsl:when test=". instance of element() or . instance of document-node()">
																				<xsl:apply-templates/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:value-of select="."/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																	<span>
																		<xsl:text>d6]</xsl:text>
																	</span>
																</a>
															</td>
														</tr>
														<tr>
															<td valign="top">
																<span>
																	<xsl:text>Data Processing</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>Device Manipulation</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Willpower + Firewall</xsl:text>
																</span>
															</td>
															<td valign="top">
																<xsl:for-each select="gear">
																	<xsl:for-each select="equipment">
																		<xsl:for-each select="item[(matrix/matrixattribute[@name=&apos;Sleaze&apos;]/@modified &gt; 0 or  contains(description, &apos;ommlink&apos;))]">
																			<xsl:element name="div">
																				<xsl:attribute name="class"><xsl:value-of select="'grid-100'"/></xsl:attribute>
																				<xsl:for-each select="@name">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																				<span>
																					<xsl:text> [</xsl:text>
																				</span>
																				<xsl:for-each select="sum(./matrix/matrixattribute[@name=&apos;Firewall&apos;]/@modified   | ../../../attributes/attribute[@name=&apos;Willpower&apos;]/@modified)">
																					<xsl:choose>
																						<xsl:when test=". instance of element() or . instance of document-node()">
																							<xsl:apply-templates/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:value-of select="."/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																				<span>
																					<xsl:text>d6] </xsl:text>
																				</span>
																			</xsl:element>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</td>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Spoof Command</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>1</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Send command as though Owner</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Hacking [</xsl:text>
																</span>
																<xsl:for-each select="skills">
																	<xsl:for-each select="*">
																		<xsl:for-each select="skill[@name=&apos;Hacking&apos;]">
																			<xsl:for-each select="@modified">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>] + Intuition [</xsl:text>
																</span>
																<xsl:for-each select="attributes">
																	<xsl:for-each select="attribute[@name=&apos;Intuition&apos;]">
																		<xsl:for-each select="@modified">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>]</xsl:text>
																</span>
															</td>
															<td valign="top">
																<a onclick="openRoller({sum(attributes/attribute[@name=&apos;Intuition&apos;]/@modified | skills/active/skill[@name=&apos;Hacking&apos;]/@modified)})">
																	<xsl:choose>
																		<xsl:when test="not(string(&apos;&apos;))">
																			<xsl:attribute name="href"><xsl:text>#</xsl:text></xsl:attribute>
																		</xsl:when>
																		<xsl:when test="substring(string(&apos;&apos;), 1, 1) = '#'">
																			<xsl:attribute name="href"><xsl:value-of select="&apos;&apos;"/></xsl:attribute>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:attribute name="href"><xsl:if test="substring(string(&apos;&apos;), 2, 1) = ':'"><xsl:text>file:///</xsl:text></xsl:if><xsl:value-of select="translate(string(&apos;&apos;), '&#x5c;', '/')"/></xsl:attribute>
																		</xsl:otherwise>
																	</xsl:choose>
																	<span>
																		<xsl:text>[</xsl:text>
																	</span>
																	<xsl:for-each select="sum(attributes/attribute[@name=&apos;Intuition&apos;]/@modified | skills/active/skill[@name=&apos;Hacking&apos;]/@modified)">
																		<xsl:choose>
																			<xsl:when test=". instance of element() or . instance of document-node()">
																				<xsl:apply-templates/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:value-of select="."/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																	<span>
																		<xsl:text>d6]</xsl:text>
																	</span>
																</a>
															</td>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Sleaze</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>Device Manipulation</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Logic + Firewall</xsl:text>
																</span>
															</td>
															<td valign="top">
																<xsl:for-each select="gear">
																	<xsl:for-each select="equipment">
																		<xsl:for-each select="item[(matrix/matrixattribute[@name=&apos;Sleaze&apos;]/@modified &gt; 0 or  contains(description, &apos;ommlink&apos;))]">
																			<xsl:element name="div">
																				<xsl:attribute name="class"><xsl:value-of select="'grid-100'"/></xsl:attribute>
																				<xsl:for-each select="@name">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																				<span>
																					<xsl:text> [</xsl:text>
																				</span>
																				<xsl:for-each select="sum(./matrix/matrixattribute[@name=&apos;Firewall&apos;]/@modified   | ../../../attributes/attribute[@name=&apos;Logic&apos;]/@modified)">
																					<xsl:choose>
																						<xsl:when test=". instance of element() or . instance of document-node()">
																							<xsl:apply-templates/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:value-of select="."/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																				<span>
																					<xsl:text>d6] </xsl:text>
																				</span>
																			</xsl:element>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</td>
														</tr>
														<tr>
															<td valign="top">
																<span>
																	<xsl:text>Garbage In/Garbage Out</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>3</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Change command result (Pulling Trigger ejects)</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Sofware [</xsl:text>
																</span>
																<xsl:for-each select="skills">
																	<xsl:for-each select="*">
																		<xsl:for-each select="skill[@name=&apos;Software&apos;]">
																			<xsl:for-each select="@modified">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>] + Logic [</xsl:text>
																</span>
																<xsl:for-each select="attributes">
																	<xsl:for-each select="attribute[@name=&apos;Logic&apos;]">
																		<xsl:for-each select="@modified">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>]</xsl:text>
																</span>
															</td>
															<td valign="top">
																<a onclick="openRoller({sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Software&apos;]/@modified)})">
																	<xsl:choose>
																		<xsl:when test="not(string(&apos;&apos;))">
																			<xsl:attribute name="href"><xsl:text>#</xsl:text></xsl:attribute>
																		</xsl:when>
																		<xsl:when test="substring(string(&apos;&apos;), 1, 1) = '#'">
																			<xsl:attribute name="href"><xsl:value-of select="&apos;&apos;"/></xsl:attribute>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:attribute name="href"><xsl:if test="substring(string(&apos;&apos;), 2, 1) = ':'"><xsl:text>file:///</xsl:text></xsl:if><xsl:value-of select="translate(string(&apos;&apos;), '&#x5c;', '/')"/></xsl:attribute>
																		</xsl:otherwise>
																	</xsl:choose>
																	<span>
																		<xsl:text>[</xsl:text>
																	</span>
																	<xsl:for-each select="sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Software&apos;]/@modified)">
																		<xsl:choose>
																			<xsl:when test=". instance of element() or . instance of document-node()">
																				<xsl:apply-templates/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:value-of select="."/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																	<span>
																		<xsl:text>d6]</xsl:text>
																	</span>
																</a>
															</td>
														</tr>
														<tr>
															<td valign="top">
																<span>
																	<xsl:text>Sleaze</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>Device Manipulation</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Logic + Firewall</xsl:text>
																</span>
															</td>
															<td valign="top">
																<xsl:for-each select="gear">
																	<xsl:for-each select="equipment">
																		<xsl:for-each select="item[(matrix/matrixattribute[@name=&apos;Sleaze&apos;]/@modified &gt; 0 or  contains(description, &apos;ommlink&apos;))]">
																			<xsl:element name="div">
																				<xsl:attribute name="class"><xsl:value-of select="'grid-100'"/></xsl:attribute>
																				<xsl:for-each select="@name">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																				<span>
																					<xsl:text> [</xsl:text>
																				</span>
																				<xsl:for-each select="sum(./matrix/matrixattribute[@name=&apos;Firewall&apos;]/@modified   | ../../../attributes/attribute[@name=&apos;Logic&apos;]/@modified)">
																					<xsl:choose>
																						<xsl:when test=". instance of element() or . instance of document-node()">
																							<xsl:apply-templates/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:value-of select="."/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																				<span>
																					<xsl:text>d6] </xsl:text>
																				</span>
																			</xsl:element>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</td>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Crack File</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>1</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Remove File Protection</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Hacking [</xsl:text>
																</span>
																<xsl:for-each select="skills">
																	<xsl:for-each select="*">
																		<xsl:for-each select="skill[@name=&apos;Hacking&apos;]">
																			<xsl:for-each select="@modified">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>] + Logic [</xsl:text>
																</span>
																<xsl:for-each select="attributes">
																	<xsl:for-each select="attribute[@name=&apos;Logic&apos;]">
																		<xsl:for-each select="@modified">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>]</xsl:text>
																</span>
															</td>
															<td valign="top">
																<a onclick="openRoller({sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Hacking&apos;]/@modified)})">
																	<xsl:choose>
																		<xsl:when test="not(string(&apos;&apos;))">
																			<xsl:attribute name="href"><xsl:text>#</xsl:text></xsl:attribute>
																		</xsl:when>
																		<xsl:when test="substring(string(&apos;&apos;), 1, 1) = '#'">
																			<xsl:attribute name="href"><xsl:value-of select="&apos;&apos;"/></xsl:attribute>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:attribute name="href"><xsl:if test="substring(string(&apos;&apos;), 2, 1) = ':'"><xsl:text>file:///</xsl:text></xsl:if><xsl:value-of select="translate(string(&apos;&apos;), '&#x5c;', '/')"/></xsl:attribute>
																		</xsl:otherwise>
																	</xsl:choose>
																	<span>
																		<xsl:text>[</xsl:text>
																	</span>
																	<xsl:for-each select="sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Hacking&apos;]/@modified)">
																		<xsl:choose>
																			<xsl:when test=". instance of element() or . instance of document-node()">
																				<xsl:apply-templates/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:value-of select="."/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																	<span>
																		<xsl:text>d6]</xsl:text>
																	</span>
																</a>
															</td>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Attack</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>File Manipulation</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>2 * Protection Rating</xsl:text>
																</span>
															</td>
															<td valign="top"/>
														</tr>
														<tr>
															<td valign="top">
																<span>
																	<xsl:text>Disarm Data Bomb</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>-</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Triggers Data Bomb on Failure</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Software [</xsl:text>
																</span>
																<xsl:for-each select="skills">
																	<xsl:for-each select="*">
																		<xsl:for-each select="skill[@name=&apos;Software&apos;]">
																			<xsl:for-each select="@modified">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>] + Intuition [</xsl:text>
																</span>
																<xsl:for-each select="attributes">
																	<xsl:for-each select="attribute[@name=&apos;Intuition&apos;]">
																		<xsl:for-each select="@modified">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>]</xsl:text>
																</span>
															</td>
															<td valign="top">
																<a onclick="openRoller({sum(attributes/attribute[@name=&apos;Intuition&apos;]/@modified | skills/active/skill[@name=&apos;Software&apos;]/@modified)})">
																	<xsl:choose>
																		<xsl:when test="not(string(&apos;&apos;))">
																			<xsl:attribute name="href"><xsl:text>#</xsl:text></xsl:attribute>
																		</xsl:when>
																		<xsl:when test="substring(string(&apos;&apos;), 1, 1) = '#'">
																			<xsl:attribute name="href"><xsl:value-of select="&apos;&apos;"/></xsl:attribute>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:attribute name="href"><xsl:if test="substring(string(&apos;&apos;), 2, 1) = ':'"><xsl:text>file:///</xsl:text></xsl:if><xsl:value-of select="translate(string(&apos;&apos;), '&#x5c;', '/')"/></xsl:attribute>
																		</xsl:otherwise>
																	</xsl:choose>
																	<span>
																		<xsl:text>[</xsl:text>
																	</span>
																	<xsl:for-each select="sum(attributes/attribute[@name=&apos;Intuition&apos;]/@modified | skills/active/skill[@name=&apos;Software&apos;]/@modified)">
																		<xsl:choose>
																			<xsl:when test=". instance of element() or . instance of document-node()">
																				<xsl:apply-templates/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:value-of select="."/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																	<span>
																		<xsl:text>d6]</xsl:text>
																	</span>
																</a>
															</td>
														</tr>
														<tr>
															<td valign="top">
																<span>
																	<xsl:text>Firewall</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>File Manipulation</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>2 * Data Bomb Rating</xsl:text>
																</span>
															</td>
															<td valign="top"/>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Edit File</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>1</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Create, Change, Copy, Delete, or Protect any File</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Computer [</xsl:text>
																</span>
																<xsl:for-each select="skills">
																	<xsl:for-each select="*">
																		<xsl:for-each select="skill[@name=&apos;Computer&apos;]">
																			<xsl:for-each select="@modified">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>] + Logic [</xsl:text>
																</span>
																<xsl:for-each select="attributes">
																	<xsl:for-each select="attribute[@name=&apos;Logic&apos;]">
																		<xsl:for-each select="@modified">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>]</xsl:text>
																</span>
															</td>
															<td valign="top">
																<a onclick="openRoller({sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Computer&apos;]/@modified)})">
																	<xsl:choose>
																		<xsl:when test="not(string(&apos;&apos;))">
																			<xsl:attribute name="href"><xsl:text>#</xsl:text></xsl:attribute>
																		</xsl:when>
																		<xsl:when test="substring(string(&apos;&apos;), 1, 1) = '#'">
																			<xsl:attribute name="href"><xsl:value-of select="&apos;&apos;"/></xsl:attribute>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:attribute name="href"><xsl:if test="substring(string(&apos;&apos;), 2, 1) = ':'"><xsl:text>file:///</xsl:text></xsl:if><xsl:value-of select="translate(string(&apos;&apos;), '&#x5c;', '/')"/></xsl:attribute>
																		</xsl:otherwise>
																	</xsl:choose>
																	<span>
																		<xsl:text>[</xsl:text>
																	</span>
																	<xsl:for-each select="sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Computer&apos;]/@modified)">
																		<xsl:choose>
																			<xsl:when test=". instance of element() or . instance of document-node()">
																				<xsl:apply-templates/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:value-of select="."/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																	<span>
																		<xsl:text>d6]</xsl:text>
																	</span>
																</a>
															</td>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Data Processing</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>File Manipulation</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Intuition + Firewall</xsl:text>
																</span>
															</td>
															<td valign="top">
																<xsl:for-each select="gear">
																	<xsl:for-each select="equipment">
																		<xsl:for-each select="item[(matrix/matrixattribute[@name=&apos;Sleaze&apos;]/@modified &gt; 0 or  contains(description, &apos;ommlink&apos;))]">
																			<xsl:element name="div">
																				<xsl:attribute name="class"><xsl:value-of select="'grid-100'"/></xsl:attribute>
																				<xsl:for-each select="@name">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																				<span>
																					<xsl:text> [</xsl:text>
																				</span>
																				<xsl:for-each select="sum(./matrix/matrixattribute[@name=&apos;Firewall&apos;]/@modified   | ../../../attributes/attribute[@name=&apos;Intuition&apos;]/@modified)">
																					<xsl:choose>
																						<xsl:when test=". instance of element() or . instance of document-node()">
																							<xsl:apply-templates/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:value-of select="."/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																				<span>
																					<xsl:text>d6]</xsl:text>
																				</span>
																			</xsl:element>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</td>
														</tr>
														<tr>
															<td valign="top">
																<span>
																	<xsl:text>Set Data Bomb</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>1</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Choose Rating, Does Rating(d6) Matrix DV</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Software [</xsl:text>
																</span>
																<xsl:for-each select="skills">
																	<xsl:for-each select="*">
																		<xsl:for-each select="skill[@name=&apos;Software&apos;]">
																			<xsl:for-each select="@modified">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>] + Logic [</xsl:text>
																</span>
																<xsl:for-each select="attributes">
																	<xsl:for-each select="attribute[@name=&apos;Logic&apos;]">
																		<xsl:for-each select="@modified">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>]</xsl:text>
																</span>
															</td>
															<td valign="top">
																<a onclick="openRoller({sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Software&apos;]/@modified)})">
																	<xsl:choose>
																		<xsl:when test="not(string(&apos;&apos;))">
																			<xsl:attribute name="href"><xsl:text>#</xsl:text></xsl:attribute>
																		</xsl:when>
																		<xsl:when test="substring(string(&apos;&apos;), 1, 1) = '#'">
																			<xsl:attribute name="href"><xsl:value-of select="&apos;&apos;"/></xsl:attribute>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:attribute name="href"><xsl:if test="substring(string(&apos;&apos;), 2, 1) = ':'"><xsl:text>file:///</xsl:text></xsl:if><xsl:value-of select="translate(string(&apos;&apos;), '&#x5c;', '/')"/></xsl:attribute>
																		</xsl:otherwise>
																	</xsl:choose>
																	<span>
																		<xsl:text>[</xsl:text>
																	</span>
																	<xsl:for-each select="sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Software&apos;]/@modified)">
																		<xsl:choose>
																			<xsl:when test=". instance of element() or . instance of document-node()">
																				<xsl:apply-templates/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:value-of select="."/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																	<span>
																		<xsl:text>d6]</xsl:text>
																	</span>
																</a>
															</td>
														</tr>
														<tr>
															<td valign="top">
																<span>
																	<xsl:text>Sleaze</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>File Manipulation</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>2 * Data Bomb Rating</xsl:text>
																</span>
															</td>
															<td valign="top"/>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Matrix Perception</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>-</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Opposed if target is running silent</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Computer [</xsl:text>
																</span>
																<xsl:for-each select="skills">
																	<xsl:for-each select="*">
																		<xsl:for-each select="skill[@name=&apos;Computer&apos;]">
																			<xsl:for-each select="@modified">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>] + Inuition [</xsl:text>
																</span>
																<xsl:for-each select="attributes">
																	<xsl:for-each select="attribute[@name=&apos;Intuition&apos;]">
																		<xsl:for-each select="@modified">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>]</xsl:text>
																</span>
															</td>
															<td valign="top">
																<a onclick="openRoller({sum(attributes/attribute[@name=&apos;Intuition&apos;]/@modified | skills/active/skill[@name=&apos;Computer&apos;]/@modified)})">
																	<xsl:choose>
																		<xsl:when test="not(string(&apos;&apos;))">
																			<xsl:attribute name="href"><xsl:text>#</xsl:text></xsl:attribute>
																		</xsl:when>
																		<xsl:when test="substring(string(&apos;&apos;), 1, 1) = '#'">
																			<xsl:attribute name="href"><xsl:value-of select="&apos;&apos;"/></xsl:attribute>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:attribute name="href"><xsl:if test="substring(string(&apos;&apos;), 2, 1) = ':'"><xsl:text>file:///</xsl:text></xsl:if><xsl:value-of select="translate(string(&apos;&apos;), '&#x5c;', '/')"/></xsl:attribute>
																		</xsl:otherwise>
																	</xsl:choose>
																	<span>
																		<xsl:text>[</xsl:text>
																	</span>
																	<xsl:for-each select="sum(attributes/attribute[@name=&apos;Intuition&apos;]/@modified | skills/active/skill[@name=&apos;Computer&apos;]/@modified)">
																		<xsl:choose>
																			<xsl:when test=". instance of element() or . instance of document-node()">
																				<xsl:apply-templates/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:value-of select="."/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																	<span>
																		<xsl:text>d6]</xsl:text>
																	</span>
																</a>
															</td>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Data Processing</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>Information Gathering</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Logic + Sleaze</xsl:text>
																</span>
															</td>
															<td valign="top">
																<xsl:for-each select="gear">
																	<xsl:for-each select="equipment">
																		<xsl:for-each select="item[(matrix/matrixattribute[@name=&apos;Sleaze&apos;]/@modified &gt; 0 or  contains(description, &apos;ommlink&apos;))]">
																			<xsl:element name="div">
																				<xsl:attribute name="class"><xsl:value-of select="'grid-100'"/></xsl:attribute>
																				<xsl:for-each select="@name">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																				<span>
																					<xsl:text> [</xsl:text>
																				</span>
																				<xsl:for-each select="sum(./matrix/matrixattribute[@name=&apos;Sleaze&apos;]/@modified   | ../../../attributes/attribute[@name=&apos;Logic&apos;]/@modified)">
																					<xsl:choose>
																						<xsl:when test=". instance of element() or . instance of document-node()">
																							<xsl:apply-templates/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:value-of select="."/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																				<span>
																					<xsl:text>d6] </xsl:text>
																				</span>
																			</xsl:element>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</td>
														</tr>
														<tr>
															<td valign="top">
																<span>
																	<xsl:text>Snoop</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>1</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>View/Record traffic to/from Marked Device</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Electronic Warfare [</xsl:text>
																</span>
																<xsl:for-each select="skills">
																	<xsl:for-each select="*">
																		<xsl:for-each select="skill[@name=&apos;Electronic Warfare&apos;]">
																			<xsl:for-each select="@modified">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>] + Intuition [</xsl:text>
																</span>
																<xsl:for-each select="attributes">
																	<xsl:for-each select="attribute[@name=&apos;Intuition&apos;]">
																		<xsl:for-each select="@modified">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>]</xsl:text>
																</span>
															</td>
															<td valign="top">
																<a onclick="openRoller({sum(attributes/attribute[@name=&apos;Intuition&apos;]/@modified | skills/active/skill[@name=&apos;Electronic Warfare&apos;]/@modified)})">
																	<xsl:choose>
																		<xsl:when test="not(string(&apos;&apos;))">
																			<xsl:attribute name="href"><xsl:text>#</xsl:text></xsl:attribute>
																		</xsl:when>
																		<xsl:when test="substring(string(&apos;&apos;), 1, 1) = '#'">
																			<xsl:attribute name="href"><xsl:value-of select="&apos;&apos;"/></xsl:attribute>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:attribute name="href"><xsl:if test="substring(string(&apos;&apos;), 2, 1) = ':'"><xsl:text>file:///</xsl:text></xsl:if><xsl:value-of select="translate(string(&apos;&apos;), '&#x5c;', '/')"/></xsl:attribute>
																		</xsl:otherwise>
																	</xsl:choose>
																	<span>
																		<xsl:text>[</xsl:text>
																	</span>
																	<xsl:for-each select="sum(attributes/attribute[@name=&apos;Intuition&apos;]/@modified | skills/active/skill[@name=&apos;Electronic Warfare&apos;]/@modified)">
																		<xsl:choose>
																			<xsl:when test=". instance of element() or . instance of document-node()">
																				<xsl:apply-templates/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:value-of select="."/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																	<span>
																		<xsl:text>d6]</xsl:text>
																	</span>
																</a>
															</td>
														</tr>
														<tr>
															<td valign="top">
																<span>
																	<xsl:text>Sleaze</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>Information Gathering</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Logic + Firewall</xsl:text>
																</span>
															</td>
															<td valign="top">
																<xsl:for-each select="gear">
																	<xsl:for-each select="equipment">
																		<xsl:for-each select="item[(matrix/matrixattribute[@name=&apos;Sleaze&apos;]/@modified &gt; 0 or  contains(description, &apos;ommlink&apos;))]">
																			<xsl:element name="div">
																				<xsl:attribute name="class"><xsl:value-of select="'grid-100'"/></xsl:attribute>
																				<xsl:for-each select="@name">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																				<span>
																					<xsl:text> [</xsl:text>
																				</span>
																				<xsl:for-each select="sum(./matrix/matrixattribute[@name=&apos;Firewall&apos;]/@modified   | ../../../attributes/attribute[@name=&apos;Logic&apos;]/@modified)">
																					<xsl:choose>
																						<xsl:when test=". instance of element() or . instance of document-node()">
																							<xsl:apply-templates/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:value-of select="."/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																				<span>
																					<xsl:text>d6] </xsl:text>
																				</span>
																			</xsl:element>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</td>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Trace Icon</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>2</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Locate Physical Location of device/persona</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Computer [</xsl:text>
																</span>
																<xsl:for-each select="skills">
																	<xsl:for-each select="*">
																		<xsl:for-each select="skill[@name=&apos;Computer&apos;]">
																			<xsl:for-each select="@modified">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>] + Intuition [</xsl:text>
																</span>
																<xsl:for-each select="attributes">
																	<xsl:for-each select="attribute[@name=&apos;Intuition&apos;]">
																		<xsl:for-each select="@modified">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>]</xsl:text>
																</span>
															</td>
															<td valign="top">
																<a onclick="openRoller({sum(attributes/attribute[@name=&apos;Intuition&apos;]/@modified | skills/active/skill[@name=&apos;Computer&apos;]/@modified)})">
																	<xsl:choose>
																		<xsl:when test="not(string(&apos;&apos;))">
																			<xsl:attribute name="href"><xsl:text>#</xsl:text></xsl:attribute>
																		</xsl:when>
																		<xsl:when test="substring(string(&apos;&apos;), 1, 1) = '#'">
																			<xsl:attribute name="href"><xsl:value-of select="&apos;&apos;"/></xsl:attribute>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:attribute name="href"><xsl:if test="substring(string(&apos;&apos;), 2, 1) = ':'"><xsl:text>file:///</xsl:text></xsl:if><xsl:value-of select="translate(string(&apos;&apos;), '&#x5c;', '/')"/></xsl:attribute>
																		</xsl:otherwise>
																	</xsl:choose>
																	<span>
																		<xsl:text>[</xsl:text>
																	</span>
																	<xsl:for-each select="sum(attributes/attribute[@name=&apos;Intuition&apos;]/@modified | skills/active/skill[@name=&apos;Computer&apos;]/@modified)">
																		<xsl:choose>
																			<xsl:when test=". instance of element() or . instance of document-node()">
																				<xsl:apply-templates/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:value-of select="."/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																	<span>
																		<xsl:text>d6]</xsl:text>
																	</span>
																</a>
															</td>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Data Processing</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>Information Gathering</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Willpower + Sleaze</xsl:text>
																</span>
															</td>
															<td valign="top">
																<xsl:for-each select="gear">
																	<xsl:for-each select="equipment">
																		<xsl:for-each select="item[(matrix/matrixattribute[@name=&apos;Sleaze&apos;]/@modified &gt; 0 or  contains(description, &apos;ommlink&apos;))]">
																			<xsl:element name="div">
																				<xsl:attribute name="class"><xsl:value-of select="'grid-100'"/></xsl:attribute>
																				<xsl:for-each select="@name">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																				<span>
																					<xsl:text> [</xsl:text>
																				</span>
																				<xsl:for-each select="sum(./matrix/matrixattribute[@name=&apos;Sleaze&apos;]/@modified   | ../../../attributes/attribute[@name=&apos;Willpower&apos;]/@modified)">
																					<xsl:choose>
																						<xsl:when test=". instance of element() or . instance of document-node()">
																							<xsl:apply-templates/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:value-of select="."/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																				<span>
																					<xsl:text>d6] </xsl:text>
																				</span>
																			</xsl:element>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</td>
														</tr>
														<tr>
															<td valign="top">
																<span>
																	<xsl:text>Brute Force Attack</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>-</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>+1 Mark. Optional +1 Matrix DV per 2 net hits</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Cybercombat [</xsl:text>
																</span>
																<xsl:for-each select="skills">
																	<xsl:for-each select="*">
																		<xsl:for-each select="skill[@name=&apos;Cybercombat&apos;]">
																			<xsl:for-each select="@modified">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>] + Logic [</xsl:text>
																</span>
																<xsl:for-each select="attributes">
																	<xsl:for-each select="attribute[@name=&apos;Logic&apos;]">
																		<xsl:for-each select="@modified">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>]</xsl:text>
																</span>
															</td>
															<td valign="top">
																<a onclick="openRoller({sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Cybercombat&apos;]/@modified)})">
																	<xsl:choose>
																		<xsl:when test="not(string(&apos;&apos;))">
																			<xsl:attribute name="href"><xsl:text>#</xsl:text></xsl:attribute>
																		</xsl:when>
																		<xsl:when test="substring(string(&apos;&apos;), 1, 1) = '#'">
																			<xsl:attribute name="href"><xsl:value-of select="&apos;&apos;"/></xsl:attribute>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:attribute name="href"><xsl:if test="substring(string(&apos;&apos;), 2, 1) = ':'"><xsl:text>file:///</xsl:text></xsl:if><xsl:value-of select="translate(string(&apos;&apos;), '&#x5c;', '/')"/></xsl:attribute>
																		</xsl:otherwise>
																	</xsl:choose>
																	<span>
																		<xsl:text>[</xsl:text>
																	</span>
																	<xsl:for-each select="sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Cybercombat&apos;]/@modified)">
																		<xsl:choose>
																			<xsl:when test=". instance of element() or . instance of document-node()">
																				<xsl:apply-templates/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:value-of select="."/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																	<span>
																		<xsl:text>d6]</xsl:text>
																	</span>
																</a>
															</td>
														</tr>
														<tr>
															<td valign="top">
																<span>
																	<xsl:text>Attack</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>Mark Manipulation</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Willpower + Firewall</xsl:text>
																</span>
															</td>
															<td valign="top">
																<xsl:for-each select="gear">
																	<xsl:for-each select="equipment">
																		<xsl:for-each select="item[(matrix/matrixattribute[@name=&apos;Sleaze&apos;]/@modified &gt; 0 or  contains(description, &apos;ommlink&apos;))]">
																			<xsl:element name="div">
																				<xsl:attribute name="class"><xsl:value-of select="'grid-100'"/></xsl:attribute>
																				<xsl:for-each select="@name">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																				<span>
																					<xsl:text> [</xsl:text>
																				</span>
																				<xsl:for-each select="sum(./matrix/matrixattribute[@name=&apos;Firewall&apos;]/@modified   | ../../../attributes/attribute[@name=&apos;Willpower&apos;]/@modified)">
																					<xsl:choose>
																						<xsl:when test=". instance of element() or . instance of document-node()">
																							<xsl:apply-templates/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:value-of select="."/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																				<span>
																					<xsl:text>d6] </xsl:text>
																				</span>
																			</xsl:element>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</td>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Brute Force Grid Hop</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>-</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Hop to Grid you don&apos;t have access to</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Cybercombat [</xsl:text>
																</span>
																<xsl:for-each select="skills">
																	<xsl:for-each select="*">
																		<xsl:for-each select="skill[@name=&apos;Cybercombat&apos;]">
																			<xsl:for-each select="@modified">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>] + Logic [</xsl:text>
																</span>
																<xsl:for-each select="attributes">
																	<xsl:for-each select="attribute[@name=&apos;Logic&apos;]">
																		<xsl:for-each select="@modified">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>]</xsl:text>
																</span>
															</td>
															<td valign="top">
																<a onclick="openRoller({sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Cybercombat&apos;]/@modified)})">
																	<xsl:choose>
																		<xsl:when test="not(string(&apos;&apos;))">
																			<xsl:attribute name="href"><xsl:text>#</xsl:text></xsl:attribute>
																		</xsl:when>
																		<xsl:when test="substring(string(&apos;&apos;), 1, 1) = '#'">
																			<xsl:attribute name="href"><xsl:value-of select="&apos;&apos;"/></xsl:attribute>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:attribute name="href"><xsl:if test="substring(string(&apos;&apos;), 2, 1) = ':'"><xsl:text>file:///</xsl:text></xsl:if><xsl:value-of select="translate(string(&apos;&apos;), '&#x5c;', '/')"/></xsl:attribute>
																		</xsl:otherwise>
																	</xsl:choose>
																	<span>
																		<xsl:text>[</xsl:text>
																	</span>
																	<xsl:for-each select="sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Cybercombat&apos;]/@modified)">
																		<xsl:choose>
																			<xsl:when test=". instance of element() or . instance of document-node()">
																				<xsl:apply-templates/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:value-of select="."/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																	<span>
																		<xsl:text>d6]</xsl:text>
																	</span>
																</a>
															</td>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Attack</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>Mark Manipulation</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>4 (local) or 6 (global)</xsl:text>
																</span>
															</td>
															<td valign="top"/>
														</tr>
														<tr>
															<td valign="top">
																<span>
																	<xsl:text>Erase Mark</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>3</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Remove Marks on single icon from single icon</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Computer [</xsl:text>
																</span>
																<xsl:for-each select="skills">
																	<xsl:for-each select="*">
																		<xsl:for-each select="skill[@name=&apos;Computer&apos;]">
																			<xsl:for-each select="@modified">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>] + Logic [</xsl:text>
																</span>
																<xsl:for-each select="attributes">
																	<xsl:for-each select="attribute[@name=&apos;Logic&apos;]">
																		<xsl:for-each select="@modified">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>]</xsl:text>
																</span>
															</td>
															<td valign="top">
																<a onclick="openRoller({sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Computer&apos;]/@modified)})">
																	<xsl:choose>
																		<xsl:when test="not(string(&apos;&apos;))">
																			<xsl:attribute name="href"><xsl:text>#</xsl:text></xsl:attribute>
																		</xsl:when>
																		<xsl:when test="substring(string(&apos;&apos;), 1, 1) = '#'">
																			<xsl:attribute name="href"><xsl:value-of select="&apos;&apos;"/></xsl:attribute>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:attribute name="href"><xsl:if test="substring(string(&apos;&apos;), 2, 1) = ':'"><xsl:text>file:///</xsl:text></xsl:if><xsl:value-of select="translate(string(&apos;&apos;), '&#x5c;', '/')"/></xsl:attribute>
																		</xsl:otherwise>
																	</xsl:choose>
																	<span>
																		<xsl:text>[</xsl:text>
																	</span>
																	<xsl:for-each select="sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Computer&apos;]/@modified)">
																		<xsl:choose>
																			<xsl:when test=". instance of element() or . instance of document-node()">
																				<xsl:apply-templates/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:value-of select="."/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																	<span>
																		<xsl:text>d6]</xsl:text>
																	</span>
																</a>
															</td>
														</tr>
														<tr>
															<td valign="top">
																<span>
																	<xsl:text>Attack</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>Mark Manipulation</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Willpower + Firewall</xsl:text>
																</span>
															</td>
															<td valign="top">
																<xsl:for-each select="gear">
																	<xsl:for-each select="equipment">
																		<xsl:for-each select="item[(matrix/matrixattribute[@name=&apos;Sleaze&apos;]/@modified &gt; 0 or  contains(description, &apos;ommlink&apos;))]">
																			<xsl:element name="div">
																				<xsl:attribute name="class"><xsl:value-of select="'grid-100'"/></xsl:attribute>
																				<xsl:for-each select="@name">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																				<span>
																					<xsl:text> [</xsl:text>
																				</span>
																				<xsl:for-each select="sum(./matrix/matrixattribute[@name=&apos;Firewall&apos;]/@modified   | ../../../attributes/attribute[@name=&apos;Willpower&apos;]/@modified)">
																					<xsl:choose>
																						<xsl:when test=". instance of element() or . instance of document-node()">
																							<xsl:apply-templates/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:value-of select="."/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																				<span>
																					<xsl:text>d6] </xsl:text>
																				</span>
																			</xsl:element>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</td>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Hack on the Fly</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>-</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>+1 Mark.&#160; +1 Matrix Perception Hit per 2 Net Hits</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Hacking [</xsl:text>
																</span>
																<xsl:for-each select="skills">
																	<xsl:for-each select="*">
																		<xsl:for-each select="skill[@name=&apos;Hacking&apos;]">
																			<xsl:for-each select="@modified">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>] + Logic [</xsl:text>
																</span>
																<xsl:for-each select="attributes">
																	<xsl:for-each select="attribute[@name=&apos;Logic&apos;]">
																		<xsl:for-each select="@modified">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>]</xsl:text>
																</span>
															</td>
															<td valign="top">
																<a onclick="openRoller({sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Hacking&apos;]/@modified)})">
																	<xsl:choose>
																		<xsl:when test="not(string(&apos;#&apos;))">
																			<xsl:attribute name="href"><xsl:text>#</xsl:text></xsl:attribute>
																		</xsl:when>
																		<xsl:when test="substring(string(&apos;#&apos;), 1, 1) = '#'">
																			<xsl:attribute name="href"><xsl:value-of select="&apos;#&apos;"/></xsl:attribute>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:attribute name="href"><xsl:if test="substring(string(&apos;#&apos;), 2, 1) = ':'"><xsl:text>file:///</xsl:text></xsl:if><xsl:value-of select="translate(string(&apos;#&apos;), '&#x5c;', '/')"/></xsl:attribute>
																		</xsl:otherwise>
																	</xsl:choose>
																	<span>
																		<xsl:text>[</xsl:text>
																	</span>
																	<xsl:for-each select="sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Hacking&apos;]/@modified)">
																		<xsl:choose>
																			<xsl:when test=". instance of element() or . instance of document-node()">
																				<xsl:apply-templates/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:value-of select="."/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																	<span>
																		<xsl:text>d6]</xsl:text>
																	</span>
																</a>
															</td>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Sleaze</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>Mark Manipulation</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Intuition + Firewall</xsl:text>
																</span>
															</td>
															<td valign="top">
																<xsl:for-each select="gear">
																	<xsl:for-each select="equipment">
																		<xsl:for-each select="item[(matrix/matrixattribute[@name=&apos;Sleaze&apos;]/@modified &gt; 0 or  contains(description, &apos;ommlink&apos;))]">
																			<xsl:element name="div">
																				<xsl:attribute name="class"><xsl:value-of select="'grid-100'"/></xsl:attribute>
																				<xsl:for-each select="@name">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																				<span>
																					<xsl:text> [</xsl:text>
																				</span>
																				<xsl:for-each select="sum(./matrix/matrixattribute[@name=&apos;Firewall&apos;]/@modified   | ../../../attributes/attribute[@name=&apos;Intuition&apos;]/@modified)">
																					<xsl:choose>
																						<xsl:when test=". instance of element() or . instance of document-node()">
																							<xsl:apply-templates/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:value-of select="."/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																				<span>
																					<xsl:text>d6] </xsl:text>
																				</span>
																			</xsl:element>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</td>
														</tr>
														<tr>
															<td valign="top">
																<span>
																	<xsl:text>Hack on the Fly Grid Hop</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>Hop to grid you don&apos;t have access to</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Hacking [</xsl:text>
																</span>
																<xsl:for-each select="skills">
																	<xsl:for-each select="*">
																		<xsl:for-each select="skill[@name=&apos;Hacking&apos;]">
																			<xsl:for-each select="@modified">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>] + Logic [</xsl:text>
																</span>
																<xsl:for-each select="attributes">
																	<xsl:for-each select="attribute[@name=&apos;Logic&apos;]">
																		<xsl:for-each select="@modified">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>]</xsl:text>
																</span>
															</td>
															<td valign="top">
																<a onclick="openRoller({sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Hacking&apos;]/@modified)})">
																	<xsl:choose>
																		<xsl:when test="not(string(&apos;&apos;))">
																			<xsl:attribute name="href"><xsl:text>#</xsl:text></xsl:attribute>
																		</xsl:when>
																		<xsl:when test="substring(string(&apos;&apos;), 1, 1) = '#'">
																			<xsl:attribute name="href"><xsl:value-of select="&apos;&apos;"/></xsl:attribute>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:attribute name="href"><xsl:if test="substring(string(&apos;&apos;), 2, 1) = ':'"><xsl:text>file:///</xsl:text></xsl:if><xsl:value-of select="translate(string(&apos;&apos;), '&#x5c;', '/')"/></xsl:attribute>
																		</xsl:otherwise>
																	</xsl:choose>
																	<span>
																		<xsl:text>[</xsl:text>
																	</span>
																	<xsl:for-each select="sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Hacking&apos;]/@modified)">
																		<xsl:choose>
																			<xsl:when test=". instance of element() or . instance of document-node()">
																				<xsl:apply-templates/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:value-of select="."/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																	<span>
																		<xsl:text>d6]</xsl:text>
																	</span>
																</a>
															</td>
														</tr>
														<tr>
															<td valign="top">
																<span>
																	<xsl:text>Sleaze</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>Mark Manipulation</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>4 (local) or 6 (global)</xsl:text>
																</span>
															</td>
															<td valign="top"/>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Crash Program</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>1</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Crash a specific program until Reboot</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Cybercombat [</xsl:text>
																</span>
																<xsl:for-each select="skills">
																	<xsl:for-each select="*">
																		<xsl:for-each select="skill[@name=&apos;Cybercombat&apos;]">
																			<xsl:for-each select="@modified">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>] + Logic [</xsl:text>
																</span>
																<xsl:for-each select="attributes">
																	<xsl:for-each select="attribute[@name=&apos;Logic&apos;]">
																		<xsl:for-each select="@modified">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>]</xsl:text>
																</span>
															</td>
															<td valign="top">
																<a onclick="openRoller({sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Cybercombat&apos;]/@modified)})">
																	<xsl:choose>
																		<xsl:when test="not(string(&apos;&apos;))">
																			<xsl:attribute name="href"><xsl:text>#</xsl:text></xsl:attribute>
																		</xsl:when>
																		<xsl:when test="substring(string(&apos;&apos;), 1, 1) = '#'">
																			<xsl:attribute name="href"><xsl:value-of select="&apos;&apos;"/></xsl:attribute>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:attribute name="href"><xsl:if test="substring(string(&apos;&apos;), 2, 1) = ':'"><xsl:text>file:///</xsl:text></xsl:if><xsl:value-of select="translate(string(&apos;&apos;), '&#x5c;', '/')"/></xsl:attribute>
																		</xsl:otherwise>
																	</xsl:choose>
																	<span>
																		<xsl:text>[</xsl:text>
																	</span>
																	<xsl:for-each select="sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Cybercombat&apos;]/@modified)">
																		<xsl:choose>
																			<xsl:when test=". instance of element() or . instance of document-node()">
																				<xsl:apply-templates/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:value-of select="."/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																	<span>
																		<xsl:text>d6]</xsl:text>
																	</span>
																</a>
															</td>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Attack</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>Matrix Combat</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Intuition + Firewall</xsl:text>
																</span>
															</td>
															<td valign="top">
																<xsl:for-each select="gear">
																	<xsl:for-each select="equipment">
																		<xsl:for-each select="item[(matrix/matrixattribute[@name=&apos;Sleaze&apos;]/@modified &gt; 0 or  contains(description, &apos;ommlink&apos;))]">
																			<xsl:element name="div">
																				<xsl:attribute name="class"><xsl:value-of select="'grid-100'"/></xsl:attribute>
																				<xsl:for-each select="@name">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																				<span>
																					<xsl:text> [</xsl:text>
																				</span>
																				<xsl:for-each select="sum(./matrix/matrixattribute[@name=&apos;Firewall&apos;]/@modified   | ../../../attributes/attribute[@name=&apos;Intuition&apos;]/@modified)">
																					<xsl:choose>
																						<xsl:when test=". instance of element() or . instance of document-node()">
																							<xsl:apply-templates/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:value-of select="."/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																				<span>
																					<xsl:text>d6] </xsl:text>
																				</span>
																			</xsl:element>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</td>
														</tr>
														<tr>
															<td valign="top">
																<span>
																	<xsl:text>Data Spike</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>-</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>DV = Attack + Net Hits + 2 * Marks</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Cybercombat [</xsl:text>
																</span>
																<xsl:for-each select="skills">
																	<xsl:for-each select="*">
																		<xsl:for-each select="skill[@name=&apos;Cybercombat&apos;]">
																			<xsl:for-each select="@modified">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>] + Logic [</xsl:text>
																</span>
																<xsl:for-each select="attributes">
																	<xsl:for-each select="attribute[@name=&apos;Logic&apos;]">
																		<xsl:for-each select="@modified">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>]</xsl:text>
																</span>
															</td>
															<td valign="top">
																<a onclick="openRoller({sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Cybercombat&apos;]/@modified)})">
																	<xsl:choose>
																		<xsl:when test="not(string(&apos;&apos;))">
																			<xsl:attribute name="href"><xsl:text>#</xsl:text></xsl:attribute>
																		</xsl:when>
																		<xsl:when test="substring(string(&apos;&apos;), 1, 1) = '#'">
																			<xsl:attribute name="href"><xsl:value-of select="&apos;&apos;"/></xsl:attribute>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:attribute name="href"><xsl:if test="substring(string(&apos;&apos;), 2, 1) = ':'"><xsl:text>file:///</xsl:text></xsl:if><xsl:value-of select="translate(string(&apos;&apos;), '&#x5c;', '/')"/></xsl:attribute>
																		</xsl:otherwise>
																	</xsl:choose>
																	<span>
																		<xsl:text>[</xsl:text>
																	</span>
																	<xsl:for-each select="sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Cybercombat&apos;]/@modified)">
																		<xsl:choose>
																			<xsl:when test=". instance of element() or . instance of document-node()">
																				<xsl:apply-templates/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:value-of select="."/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																	<span>
																		<xsl:text>d6]</xsl:text>
																	</span>
																</a>
															</td>
														</tr>
														<tr>
															<td valign="top">
																<span>
																	<xsl:text>Attack</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>Matrix Combat</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Intuition + Firewall</xsl:text>
																</span>
															</td>
															<td valign="top">
																<xsl:for-each select="gear">
																	<xsl:for-each select="equipment">
																		<xsl:for-each select="item[(matrix/matrixattribute[@name=&apos;Sleaze&apos;]/@modified &gt; 0 or  contains(description, &apos;ommlink&apos;))]">
																			<xsl:element name="div">
																				<xsl:attribute name="class"><xsl:value-of select="'grid-100'"/></xsl:attribute>
																				<xsl:for-each select="@name">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																				<span>
																					<xsl:text> [</xsl:text>
																				</span>
																				<xsl:for-each select="sum(./matrix/matrixattribute[@name=&apos;Firewall&apos;]/@modified   | ../../../attributes/attribute[@name=&apos;Intuition&apos;]/@modified)">
																					<xsl:choose>
																						<xsl:when test=". instance of element() or . instance of document-node()">
																							<xsl:apply-templates/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:value-of select="."/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																				<span>
																					<xsl:text>d6] </xsl:text>
																				</span>
																			</xsl:element>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</td>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Enter / Exit host</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>1</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Exit Host to where you entered from</xsl:text>
																</span>
															</td>
															<td valign="top"/>
															<td valign="top"/>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Data Processing</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>Miscellaneous</xsl:text>
																</span>
															</td>
															<td valign="top"/>
															<td valign="top"/>
														</tr>
														<tr>
															<td valign="top">
																<span>
																	<xsl:text>Grid Hop</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>-</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Mast have permission, must leave host first</xsl:text>
																</span>
															</td>
															<td valign="top"/>
															<td valign="top"/>
														</tr>
														<tr>
															<td valign="top">
																<span>
																	<xsl:text>Data Processing</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>Miscellaneous</xsl:text>
																</span>
															</td>
															<td valign="top"/>
															<td valign="top"/>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Hide</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>0</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Disappear from target that hasn&apos;t Marked you</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Electronic Warfare [</xsl:text>
																</span>
																<xsl:for-each select="skills">
																	<xsl:for-each select="*">
																		<xsl:for-each select="skill[@name=&apos;Electronic Warfare&apos;]">
																			<xsl:for-each select="@modified">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>] + Intuition [</xsl:text>
																</span>
																<xsl:for-each select="attributes">
																	<xsl:for-each select="attribute[@name=&apos;Intuition&apos;]">
																		<xsl:for-each select="@modified">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>]</xsl:text>
																</span>
															</td>
															<td valign="top">
																<a onclick="openRoller({sum(attributes/attribute[@name=&apos;Intuition&apos;]/@modified | skills/active/skill[@name=&apos;Electronic Warfare&apos;]/@modified)})">
																	<xsl:choose>
																		<xsl:when test="not(string(&apos;&apos;))">
																			<xsl:attribute name="href"><xsl:text>#</xsl:text></xsl:attribute>
																		</xsl:when>
																		<xsl:when test="substring(string(&apos;&apos;), 1, 1) = '#'">
																			<xsl:attribute name="href"><xsl:value-of select="&apos;&apos;"/></xsl:attribute>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:attribute name="href"><xsl:if test="substring(string(&apos;&apos;), 2, 1) = ':'"><xsl:text>file:///</xsl:text></xsl:if><xsl:value-of select="translate(string(&apos;&apos;), '&#x5c;', '/')"/></xsl:attribute>
																		</xsl:otherwise>
																	</xsl:choose>
																	<span>
																		<xsl:text>[</xsl:text>
																	</span>
																	<xsl:for-each select="sum(attributes/attribute[@name=&apos;Intuition&apos;]/@modified | skills/active/skill[@name=&apos;Electronic Warfare&apos;]/@modified)">
																		<xsl:choose>
																			<xsl:when test=". instance of element() or . instance of document-node()">
																				<xsl:apply-templates/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:value-of select="."/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																	<span>
																		<xsl:text>d6]</xsl:text>
																	</span>
																</a>
															</td>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Sleaze</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>Miscellaneous</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Intuition + Data Processing</xsl:text>
																</span>
															</td>
															<td valign="top">
																<xsl:for-each select="gear">
																	<xsl:for-each select="equipment">
																		<xsl:for-each select="item[(matrix/matrixattribute[@name=&apos;Sleaze&apos;]/@modified &gt; 0 or  contains(description, &apos;ommlink&apos;))]">
																			<xsl:element name="div">
																				<xsl:attribute name="class"><xsl:value-of select="'grid-100'"/></xsl:attribute>
																				<xsl:for-each select="@name">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																				<span>
																					<xsl:text> [</xsl:text>
																				</span>
																				<xsl:for-each select="sum(./matrix/matrixattribute[@name=&apos;Data Processing&apos;]/@modified   | ../../../attributes/attribute[@name=&apos;Intuition&apos;]/@modified)">
																					<xsl:choose>
																						<xsl:when test=". instance of element() or . instance of document-node()">
																							<xsl:apply-templates/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:value-of select="."/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																				<span>
																					<xsl:text>d6] </xsl:text>
																				</span>
																			</xsl:element>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</td>
														</tr>
														<tr>
															<td valign="top">
																<span>
																	<xsl:text>Jam Signals</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>Owner</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Add Hits to Noise for 100m</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Electronic Warfare [</xsl:text>
																</span>
																<xsl:for-each select="skills">
																	<xsl:for-each select="*">
																		<xsl:for-each select="skill[@name=&apos;Electronic Warfare&apos;]">
																			<xsl:for-each select="@modified">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>] + Logic [</xsl:text>
																</span>
																<xsl:for-each select="attributes">
																	<xsl:for-each select="attribute[@name=&apos;Logic&apos;]">
																		<xsl:for-each select="@modified">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>]</xsl:text>
																</span>
															</td>
															<td valign="top">
																<a onclick="openRoller({sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Electronic Warfare&apos;]/@modified)})">
																	<xsl:choose>
																		<xsl:when test="not(string(&apos;&apos;))">
																			<xsl:attribute name="href"><xsl:text>#</xsl:text></xsl:attribute>
																		</xsl:when>
																		<xsl:when test="substring(string(&apos;&apos;), 1, 1) = '#'">
																			<xsl:attribute name="href"><xsl:value-of select="&apos;&apos;"/></xsl:attribute>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:attribute name="href"><xsl:if test="substring(string(&apos;&apos;), 2, 1) = ':'"><xsl:text>file:///</xsl:text></xsl:if><xsl:value-of select="translate(string(&apos;&apos;), '&#x5c;', '/')"/></xsl:attribute>
																		</xsl:otherwise>
																	</xsl:choose>
																	<span>
																		<xsl:text>[</xsl:text>
																	</span>
																	<xsl:for-each select="sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Electronic Warfare&apos;]/@modified)">
																		<xsl:choose>
																			<xsl:when test=". instance of element() or . instance of document-node()">
																				<xsl:apply-templates/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:value-of select="."/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																	<span>
																		<xsl:text>d6]</xsl:text>
																	</span>
																</a>
															</td>
														</tr>
														<tr>
															<td valign="top">
																<span>
																	<xsl:text>Attack</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>Miscellaneous</xsl:text>
																</span>
															</td>
															<td valign="top"/>
															<td valign="top"/>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Jump into Rigged Device</xsl:text>
																</span>
															</td>
															<td>
																<span>
																	<xsl:text>3</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>No test if owner or have permission</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Electronic Warfare [</xsl:text>
																</span>
																<xsl:for-each select="skills">
																	<xsl:for-each select="*">
																		<xsl:for-each select="skill[@name=&apos;Electronic Warfare&apos;]">
																			<xsl:for-each select="@modified">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>] + Logic [</xsl:text>
																</span>
																<xsl:for-each select="attributes">
																	<xsl:for-each select="attribute[@name=&apos;Logic&apos;]">
																		<xsl:for-each select="@modified">
																			<span>
																				<xsl:value-of select="string(.)"/>
																			</span>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
																<span>
																	<xsl:text>]</xsl:text>
																</span>
															</td>
															<td valign="top">
																<a onclick="openRoller({sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Electronic Warfare&apos;]/@modified)})">
																	<xsl:choose>
																		<xsl:when test="not(string(&apos;&apos;))">
																			<xsl:attribute name="href"><xsl:text>#</xsl:text></xsl:attribute>
																		</xsl:when>
																		<xsl:when test="substring(string(&apos;&apos;), 1, 1) = '#'">
																			<xsl:attribute name="href"><xsl:value-of select="&apos;&apos;"/></xsl:attribute>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:attribute name="href"><xsl:if test="substring(string(&apos;&apos;), 2, 1) = ':'"><xsl:text>file:///</xsl:text></xsl:if><xsl:value-of select="translate(string(&apos;&apos;), '&#x5c;', '/')"/></xsl:attribute>
																		</xsl:otherwise>
																	</xsl:choose>
																	<span>
																		<xsl:text>[</xsl:text>
																	</span>
																	<xsl:for-each select="sum(attributes/attribute[@name=&apos;Logic&apos;]/@modified | skills/active/skill[@name=&apos;Electronic Warfare&apos;]/@modified)">
																		<xsl:choose>
																			<xsl:when test=". instance of element() or . instance of document-node()">
																				<xsl:apply-templates/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:value-of select="."/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																	<span>
																		<xsl:text>d6]</xsl:text>
																	</span>
																</a>
															</td>
														</tr>
														<tr bgcolor="#e1e1e1">
															<td valign="top">
																<span>
																	<xsl:text>Data Processing</xsl:text>
																</span>
															</td>
															<td/>
															<td valign="top">
																<span>
																	<xsl:text>Miscellaneous</xsl:text>
																</span>
															</td>
															<td valign="top">
																<span>
																	<xsl:text>Willpower + Firewall</xsl:text>
																</span>
															</td>
															<td valign="top">
																<xsl:for-each select="gear">
																	<xsl:for-each select="equipment">
																		<xsl:for-each select="item[(matrix/matrixattribute[@name=&apos;Sleaze&apos;]/@modified &gt; 0 or  contains(description, &apos;ommlink&apos;))]">
																			<xsl:element name="div">
																				<xsl:attribute name="class"><xsl:value-of select="'grid-100'"/></xsl:attribute>
																				<xsl:for-each select="@name">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																				<span>
																					<xsl:text> [</xsl:text>
																				</span>
																				<xsl:for-each select="sum(./matrix/matrixattribute[@name=&apos;Firewall&apos;]/@modified   | ../../../attributes/attribute[@name=&apos;Willpower&apos;]/@modified)">
																					<xsl:choose>
																						<xsl:when test=". instance of element() or . instance of document-node()">
																							<xsl:apply-templates/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:value-of select="."/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																				<span>
																					<xsl:text>d6] </xsl:text>
																				</span>
																			</xsl:element>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</td>
														</tr>
													</tbody>
												</table>
											</xsl:variable>
											<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
											<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
											<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
												<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
											</xsl:apply-templates>
											<br/>
											<xsl:for-each select="gear">
												<xsl:for-each select="*">
													<xsl:for-each select="item[(@wireless=&apos;Present&apos; and not(contains(@name,&apos;Backpack&apos;) or contains(@name,&apos;Fetish&apos;) or contains(@name,&apos;Belltpouch&apos;)))]">
														<xsl:element name="div">
															<xsl:attribute name="class"><xsl:value-of select="'grid-20'"/></xsl:attribute>
															<xsl:variable name="altova:table">
																<table border="0" width="100%">
																	<xsl:variable name="altova:CurrContextGrid_1" select="."/>
																	<xsl:variable name="altova:ColumnData"/>
																	<thead>
																		<tr bgcolor="#e1e1e1">
																			<th colspan="2">
																				<xsl:for-each select="@name">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																				<span>
																					<xsl:text> [</xsl:text>
																				</span>
																				<xsl:for-each select="matrix">
																					<xsl:for-each select="@dr">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:for-each>
																				<span>
																					<xsl:text>]</xsl:text>
																				</span>
																			</th>
																		</tr>
																	</thead>
																	<tbody>
																		<xsl:for-each select="matrix">
																			<xsl:for-each select="matrixattribute">
																				<tr>
																					<td>
																						<xsl:for-each select="@name">
																							<span style="font-weight:bold; ">
																								<xsl:value-of select="string(.)"/>
																							</span>
																						</xsl:for-each>
																					</td>
																					<td>
																						<xsl:for-each select="@modified">
																							<span>
																								<xsl:value-of select="string(.)"/>
																							</span>
																						</xsl:for-each>
																					</td>
																				</tr>
																			</xsl:for-each>
																		</xsl:for-each>
																	</tbody>
																</table>
															</xsl:variable>
															<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
															<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
															<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
																<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
															</xsl:apply-templates>
														</xsl:element>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
											<br/>
											<xsl:element name="div">
												<xsl:attribute name="class"><xsl:value-of select="'grid-66 skills'"/></xsl:attribute>
												<xsl:variable name="altova:table">
													<table border="0">
														<xsl:variable name="altova:CurrContextGrid_2" select="."/>
														<xsl:variable name="altova:ColumnData"/>
														<thead>
															<tr>
																<th style="text-align:left; ">
																	<span>
																		<xsl:text>name</xsl:text>
																	</span>
																</th>
																<th style="text-align:left; ">
																	<span>
																		<xsl:text>modified</xsl:text>
																	</span>
																</th>
																<th style="text-align:left; ">
																	<span>
																		<xsl:text>dicepool</xsl:text>
																	</span>
																</th>
																<th style="text-align:left; ">
																	<span>
																		<xsl:text>specialization</xsl:text>
																	</span>
																</th>
															</tr>
														</thead>
														<tbody>
															<xsl:for-each select="skills">
																<xsl:for-each select="*">
																	<xsl:for-each select="skill">
																		<tr>
																			<td style="text-align:left; ">
																				<xsl:for-each select="@name">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</td>
																			<td style="text-align:left; ">
																				<xsl:for-each select="@modified">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</td>
																			<td style="text-align:left; ">
																				<xsl:for-each select="@dicepool">
																					<span>
																						<xsl:value-of select="string(.)"/>
																					</span>
																				</xsl:for-each>
																			</td>
																			<td style="text-align:left; ">
																				<xsl:for-each select="specialization">
																					<xsl:for-each select="@bonustext">
																						<span>
																							<xsl:value-of select="string(.)"/>
																						</span>
																					</xsl:for-each>
																				</xsl:for-each>
																			</td>
																		</tr>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</tbody>
													</table>
												</xsl:variable>
												<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
												<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
												<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
													<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
												</xsl:apply-templates>
											</xsl:element>
											<br/>
											<xsl:element name="div">
												<xsl:attribute name="class"><xsl:value-of select="'grid-33 attributes'"/></xsl:attribute>
												<xsl:variable name="altova:table">
													<table border="0">
														<xsl:variable name="altova:CurrContextGrid_3" select="."/>
														<xsl:variable name="altova:ColumnData"/>
														<thead>
															<tr>
																<th>
																	<span>
																		<xsl:text>Attribute</xsl:text>
																	</span>
																</th>
																<th style="text-align:left; ">
																	<span>
																		<xsl:text>Rating</xsl:text>
																	</span>
																</th>
															</tr>
														</thead>
														<tbody>
															<xsl:for-each select="attributes">
																<xsl:for-each select="attribute">
																	<tr>
																		<td>
																			<xsl:for-each select="@name">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																		</td>
																		<td style="text-align:left; ">
																			<xsl:for-each select="@modified">
																				<span>
																					<xsl:value-of select="string(.)"/>
																				</span>
																			</xsl:for-each>
																			<br/>
																		</td>
																	</tr>
																</xsl:for-each>
															</xsl:for-each>
														</tbody>
													</table>
												</xsl:variable>
												<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
												<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
												<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
													<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
												</xsl:apply-templates>
											</xsl:element>
										</xsl:element>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:element>
				</xsl:element>
				<div style="display:none; " class="modal-content grid-100" id="dice-tower">
					<div class="grid-container close" onclick="closeTower()">
						<span>
							<xsl:text>X</xsl:text>
						</span>
					</div>
					<div class="modal-header" onclick="closeTower()">
						<span>
							<xsl:text>Dice Roller</xsl:text>
						</span>
					</div>
					<xsl:element name="div">
						<xsl:attribute name="class"><xsl:value-of select="'grid-66 grid-parent'"/></xsl:attribute>
						<xsl:attribute name="id"><xsl:value-of select="'dice-results'"/></xsl:attribute>
						<xsl:element name="div">
							<xsl:attribute name="class"><xsl:value-of select="'grid-40'"/></xsl:attribute>
							<span>
								<xsl:text>Dice Rolled</xsl:text>
							</span>
						</xsl:element>
						<xsl:element name="div">
							<xsl:attribute name="class"><xsl:value-of select="'grid-40'"/></xsl:attribute>
							<span>
								<xsl:text>Dice Results</xsl:text>
							</span>
						</xsl:element>
						<xsl:element name="div">
							<xsl:attribute name="class"><xsl:value-of select="'grid-20 reroll'"/></xsl:attribute>
							<span>
								<xsl:text>Reroll</xsl:text>
							</span>
						</xsl:element>
					</xsl:element>
					<br/>
					<xsl:element name="div">
						<xsl:attribute name="class"><xsl:value-of select="'grid-33 grid-parent'"/></xsl:attribute>
						<xsl:element name="div">
							<xsl:attribute name="class"><xsl:value-of select="'grid-100'"/></xsl:attribute>
							<xsl:attribute name="id"><xsl:value-of select="'action-name'"/></xsl:attribute>
							<span>
								<xsl:text>Action Name</xsl:text>
							</span>
						</xsl:element>
						<br/>
						<xsl:element name="div">
							<xsl:attribute name="class"><xsl:value-of select="'grid-50'"/></xsl:attribute>
							<span>
								<xsl:text>Dice</xsl:text>
							</span>
						</xsl:element>
						<div id="dice">
							<span id="dice">
								<xsl:text>6</xsl:text>
							</span>
						</div>
						<xsl:element name="div">
							<xsl:attribute name="class"><xsl:value-of select="'grid-50'"/></xsl:attribute>
							<span>
								<xsl:text>Bonus Dice</xsl:text>
							</span>
						</xsl:element>
						<xsl:element name="div">
							<xsl:attribute name="class"><xsl:value-of select="'grid-50 dice-mod'"/></xsl:attribute>
							<xsl:element name="input">
								<xsl:attribute name="id"><xsl:value-of select="'bonus-dice'"/></xsl:attribute>
								<xsl:attribute name="type"><xsl:value-of select="'text'"/></xsl:attribute>
							</xsl:element>
						</xsl:element>
						<xsl:element name="div">
							<xsl:attribute name="class"><xsl:value-of select="'grid-50'"/></xsl:attribute>
							<span>
								<xsl:text>Penalty Dice</xsl:text>
							</span>
						</xsl:element>
						<xsl:element name="div">
							<xsl:attribute name="class"><xsl:value-of select="'grid-50 dice-mod'"/></xsl:attribute>
							<xsl:element name="input">
								<xsl:attribute name="id"><xsl:value-of select="'penalty-dice'"/></xsl:attribute>
								<xsl:attribute name="type"><xsl:value-of select="'text'"/></xsl:attribute>
							</xsl:element>
						</xsl:element>
						<xsl:element name="div">
							<xsl:attribute name="class"><xsl:value-of select="'grid-50'"/></xsl:attribute>
							<span>
								<xsl:text>Edge Roll (Pre)</xsl:text>
							</span>
						</xsl:element>
						<xsl:element name="div">
							<xsl:attribute name="class"><xsl:value-of select="'grid-25'"/></xsl:attribute>
							<xsl:element name="input">
								<xsl:attribute name="id"><xsl:value-of select="'isPre'"/></xsl:attribute>
								<xsl:attribute name="type"><xsl:value-of select="'checkbox'"/></xsl:attribute>
							</xsl:element>
						</xsl:element>
						<xsl:element name="div">
							<xsl:attribute name="class"><xsl:value-of select="'grid-25 dice-mod'"/></xsl:attribute>
							<xsl:element name="input">
								<xsl:attribute name="id"><xsl:value-of select="'edge-dice'"/></xsl:attribute>
								<xsl:attribute name="type"><xsl:value-of select="'text'"/></xsl:attribute>
							</xsl:element>
						</xsl:element>
						<xsl:element name="div">
							<xsl:attribute name="class"><xsl:value-of select="'grid-100'"/></xsl:attribute>
							<xsl:attribute name="id"><xsl:value-of select="'action-roll'"/></xsl:attribute>
							<xsl:attribute name="onclick"><xsl:value-of select="'rollDice(6,true)'"/></xsl:attribute>
							<h1>
								<span>
									<xsl:text>Roll Now</xsl:text>
								</span>
							</h1>
						</xsl:element>
						<br/>
					</xsl:element>
					<div class="modal-footer">
						<span>
							<xsl:text>[ ]</xsl:text>
						</span>
					</div>
				</div>
			</body>
		</html>
	</xsl:template>
	<xsl:function name="altova:is-cell-empty" as="xs:boolean">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="altova:is-node-empty( $altova:cell )"/>
	</xsl:function>
	<xsl:function name="altova:is-node-empty" as="xs:boolean">
		<xsl:param name="altova:node" as="element()"/>
		<xsl:sequence select="every $altova:child in $altova:node/child::node() satisfies ( ( boolean( $altova:child/self::text() ) and string-length( $altova:child ) = 0 ) or ( ( boolean( $altova:child/self::div ) or boolean( $altova:child/self::span ) or boolean( $altova:child/self::a ) ) and altova:is-node-empty( $altova:child ) ) )"/>
	</xsl:function>
	<xsl:function name="altova:col-span" as="xs:integer">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="if ( exists( $altova:cell/@colspan ) ) then xs:integer( $altova:cell/@colspan ) else 1"/>
	</xsl:function>
	<xsl:template match="@* | node()" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:copy>
			<xsl:apply-templates select="@* | node()" mode="#current">
				<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
			</xsl:apply-templates>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="tbody" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:choose>
			<xsl:when test="empty(tr)">
				<xsl:copy>
					<tr>
						<td/>
					</tr>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current">
						<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
					</xsl:apply-templates>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="th | td" mode="altova:generate-table">
		<xsl:choose>
			<xsl:when test="altova:is-cell-empty( . )">
				<xsl:copy>
					<xsl:apply-templates select="@*" mode="#current"/>
					<xsl:text>&#160;</xsl:text>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current"/>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:function name="altova:GetChartYValuesForSingleSeries">
		<xsl:param name="seqCategoryLeafPos" as="node()*"/>
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:for-each select="$seqCategoryLeafPos">
			<xsl:element name="altova:Value">
				<xsl:value-of select="altova:GetChartYValueForSingleSeriesPos($nodeSeriesLeafPos, ., $bValuesInCategory)"/>
			</xsl:element>
		</xsl:for-each>
	</xsl:function>
	<xsl:function name="altova:GetChartYValueForSingleSeriesPos">
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="nodeCategoryLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:variable name="altova:seqCategoryContextIds" select="$nodeCategoryLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:seqSeriesContextIds" select="$nodeSeriesLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:sCommonContextId" select="for $i in $altova:seqCategoryContextIds return if (some $j in $altova:seqSeriesContextIds satisfies $i eq $j) then $i else ()" as="xs:string*"/>
		<xsl:choose>
			<xsl:when test="count($altova:sCommonContextId) gt 1">
				<xsl:message select="concat('Found several values instead of a single one (contexts: ', string-join($altova:sCommonContextId, ', '), ').')" terminate="yes"/>
			</xsl:when>
			<xsl:when test="count($altova:sCommonContextId) lt 1">
				<xsl:message select="concat('XBRL Chart: Info: No value found for position labeled &quot;', $nodeCategoryLeafPos/@altova:sLabel, '&quot;')" terminate="no"/>
				<xsl:sequence select="'altova:no-value'"/>
			</xsl:when>
			<xsl:when test="$bValuesInCategory">
				<xsl:sequence select="xs:string($nodeCategoryLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:sequence select="xs:string($nodeSeriesLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:GetChartLabelForPos" as="xs:string">
		<xsl:param name="nodeParam" as="node()"/>
		<xsl:value-of select="string-join($nodeParam/ancestor-or-self::altova:Pos/@altova:sLabel, ' ')"/>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-pixel" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength, 'px')">
				<xsl:value-of select="substring-before($normLength, 'px')"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'in')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * $altova:nPxPerIn"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'cm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * $altova:nPxPerIn div 2.54"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'mm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'mm')) * $altova:nPxPerIn div 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pt')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * $altova:nPxPerIn div 72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pc')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * $altova:nPxPerIn div 6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$normLength"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-mm" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength, 'px')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'px')) div $altova:nPxPerIn * 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'in')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'cm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * 10"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'mm')">
				<xsl:value-of select="substring-before($normLength, 'mm') "/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pt')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * 25.4 div 72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pc')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * 25.4 div 6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="number($normLength) div $altova:nPxPerIn * 25.4"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
</xsl:stylesheet>
